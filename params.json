{"name":"Webdb","tagline":"Webbased database that's automatically kept in synch with a remote database server","body":"# WebDB <sup><sub>v0.4.1</sub></sup>\r\n**If the client can't get to the database, we bring the database to the client.**\r\n\r\n## Get WebDB\r\nWebDB, as it's name suggests, offers a database right there in the web browser. \r\nIt can be used directly from CDN, through a regular download, or installed with NPM.\r\n\r\n### CDN\r\nThis is the easiest way to use WebDB:\r\n```xml\r\n<script src=\"https://cdn.rawgit.com/download/webdb/0.4.1/dist/webdb.min.js\"></script>\r\n```\r\n\r\n### Download\r\nIf you'd rather host the file on your own server, or use the debug version:\r\n* [webdb.min.js](https://cdn.rawgit.com/download/webdb/0.4.1/dist/webdb.min.js) (~4kB gzipped+minified, ~12kB minified)\r\n* [webdb.umd.js](https://cdn.rawgit.com/download/webdb/0.4.1/dist/webdb.umd.js) (~30kB commented)\r\n* [webdb.min.js.map](https://cdn.rawgit.com/download/webdb/0.4.1/dist/webdb.min.js.map) (~17kB debug info)\r\n\r\n### NPM\r\n```sh\r\nnpm install webdb\r\n```\r\n\r\n## Include WebDB on your page\r\nWebDB supports the Universal Module Definition and can be used directly from a script tag,\r\nthrough an AMD script loader such as RequireJS, or through a CommonJS loader.\r\n\r\n### Script tag\r\nPlain and simple:\r\n```xml\r\n<script src=\"//cdn.rawgit.com/download/webdb/0.4.1/dist/webdb.min.js\"></script>\r\n```\r\n\r\n### AMD loader\r\n```js\r\ndefine(['webdb'], function(WebDB){\r\n\t// WebDB is available here\r\n});\r\n```\r\n\r\nIf you want to load the script from CDN, configure like so:\r\n```js\r\nrequire.config({\r\n\tpaths: {\r\n\t\t'webdb': '//cdn.rawgit.com/download/webdb/0.4.1/dist/webdb.min',\r\n\t}\r\n});\r\n```\r\n\r\n### CJS loader\r\n```js\r\nvar WebDB = require('webdb');\r\n// WebDB is available here\r\n```\r\n\r\n## Use WebDB\r\nOnce loaded, you can start using WebDB. In general, you will:\r\n* Create a new WebDB\r\n* Create a new schema\r\n* Populate/load data into the DB\r\n* Run queries against the DB\r\n* Create/Read/Update/Delete data\r\n* Save data from the DB to e.g. localStorage\r\n\r\n### Create a new WebDB\r\n```js\r\nvar db = new WebDB('lucky-luke'); // use a unique ID to isolate from other scripts\r\n```\r\n\r\n### Create a new schema\r\n```js\r\nvar weapons = db.createTable('weapons', {\r\n\t'id': {type: Number, pk:true}, \r\n\t'version': {type:Number, version:true},\r\n\t'name': {type:String, length:32, unique:true}\r\n}); \r\n\r\nvar characters = db.createTable('characters', {\r\n\t'id': {type: Number, pk:true}, \r\n\t'version': {type:Number, version:true},\r\n\t'firstName': {type:String, length:32, index:true},\r\n\t'lastName': {type:String, length:32, index:true},\r\n\t'description': String, // shortcut for {type:String}\r\n\t'weaponOfChoice': {type:Number, fk:'weapons'}},\r\n});\r\n```\r\nIf no table definition is given, the table gets two columns, `id` and `version`, \r\nboth of type `Number`. Any other properties will not be indexed.\r\n\r\nIf a definition is given, any columns that are:\r\n* A Primary Key (marked with `pk`)\r\n* A Foreign Key (marked with `fk`)\r\n* Marked with `unique`\r\n* Marked with `index`\r\nwill automatically get an index and be quick to search through.\r\n\r\n### Populate/load data into the DB\r\n*TODO*: currently bulk-loading data into the db is not yet supported. Just use `db.[table].set([object, object]);` statements.\r\n```js\r\nweapons.set([\r\n\t{id:1, name:'Revolver'},\r\n\t{id:2, name:'Shotgun'},\r\n\t{id:3, name:'Mini revolver'},\r\n\t{id:4, name:'Teeth'}\r\n]);\r\n\r\ncharacters.set([\r\n\t{id:1,  firstName:'Lucky',    lastName:'Luke',   weaponOfChoice:1, description:'Shoots faster than his shadow'},\r\n\t{id:2,  firstName:'Joe',      lastName:'Dalton', weaponOfChoice:1, description:'Leader of the Dalton brothers gang'},\r\n\t{id:3,  firstName:'Jack',     lastName:'Dalton', weaponOfChoice:1, description:'Member of the Dalton brothers gang'},\r\n\t{id:4,  firstName:'William',  lastName:'Dalton', weaponOfChoice:1, description:'Member of the Dalton brothers gang'},\r\n\t{id:5,  firstName:'Averell',  lastName:'Dalton', weaponOfChoice:1, description:'Member of the Dalton brothers gang'},\r\n\t{id:6,  firstName:'Billy',    lastName:'The Kid',weaponOfChoice:1, description:'Youngest outlaw of the west'},\r\n\t{id:7,  firstName:'Buffalo',  lastName:'Bill',   weaponOfChoice:2, description:''},\r\n\t{id:8,  firstName:'Calamity', lastName:'Jane',   weaponOfChoice:2, description:''},\r\n\t{id:9,  firstName:'Pat',      lastName:'Poker',  weaponOfChoice:3, description:''},\r\n\t{id:10, firstName:'Jesse',    lastName:'James',  weaponOfChoice:1, description:''},\r\n\t{id:11, firstName:'Jolly',    lastName:'Jumper', weaponOfChoice:4, description:'The smartest horse in the world'},\r\n\t{id:12, firstName:'Rantaplan',lastName:'?',      weaponOfChoice:4, description:'The dumbest dog in the universe'},\r\n]);\r\n```\r\n\r\n### Run queries against the DB\r\nGet a character by ID:\r\n```js\r\nvar luckyLuke = characters.get(1);\r\n```\r\nThe first parameter of `get` is a criteria object. If it's not an object and it's\r\nof a type compatible with the primary key column (eg `number`/`Number`, `string`/`String`, etc) \r\nthen it will be interpreted as being a primary key.\r\n\r\nYou can also explicitly specify the primary key as search criteria:\r\n```js\r\nvar luckyLuke = characters.get({id:1});\r\n```\r\n\r\nIn the same way, you can specify other columns:\r\n```js\r\nvar daltons = characters.get({lastName:'Dalton'});\r\n```\r\n\r\nWhen multiple columns are specified, they are interpreted as AND clauses:\r\n```js\r\nvar william = characters.get({firstName:'William', lastName:'Dalton'});\r\n```\r\n\r\nWhen no arguments are given, `get` will return *all* results:\r\n```js\r\nvar all = characters.get();\r\n```\r\nTry to avoid this as it may become slow on larger datasets.\r\n\r\n### Create/Read/Update/Delete data\r\nWe saw above how we can use `set` to write data and `get` to read it.\r\nAll we need now is a way to remove data and a way to figure out how much data is there.\r\n\r\nGet amount of records in table:\r\n```js\r\nvar characterCount = characters.length; // 12;\r\n```\r\n*Note*: Remember, WebDB only knows about records present on the *client*.\r\nIf you need to know the total amount of records, including those only on the server, \r\nyou need an Ajax call.\r\n\r\nGet amount of records in resultset:\r\n```js\r\nvar daltons = characters.get({lastName:'Dalton'}); \r\nvar daltonCount = daltons.length; // 4;\r\n```\r\n\r\nDelete a single record:\r\n```js\r\nvar rantaplan = characters.get({firstName:'Rantaplan'});\r\ncharacters.del(rantaplan);\r\n```\r\n\r\nDelete multiple records:\r\n```js\r\ncharacters.del(characters.get({lastName:'Dalton'}));\r\n```\r\n\r\n\r\n\r\n## Why WebDB?\r\nTraditional web apps get everything they show from the server and send any user input to the server. \r\nAs the user browses through the site, the same data is fetched over and over. And if the user\r\ngoes offline, the app stops functioning.\r\n\r\nWhat if we could download the server database to the client and perform queries against it there?\r\n\r\n### Smart subset\r\nI know what you are thinking. There is way too much data to download the entire database right?\r\n\r\nBut think about this some more. Facebook has hundreds of milions of active users, who collectively \r\npost billions of status updates, photos, videos and chat messages each day. But most of that data\r\nis irrelevant to any single user. For most users, only those people they are friends with and the \r\nposts made by those friends, are relevant.\r\n\r\nWhat if we could define a subset of our total server data, based on characteristics of the user\r\n(such as who their friends are) and actively keep a local copy of that subset synched right there \r\non the user's machine? We would be able to offer offline functionality. We would potentially get\r\n*extremely* fast response times due to no network latency. Life would be better.\r\n\r\nThis is what WebDB tries to accomplish. It allows you to define a database schema on the client \r\nside (corresponding to the subset of data that is relevant to this client) and keep it synched\r\nwith the server automagically.\r\n\r\nIt consists of a client-side component (that you are looking at right now) which can be used \r\nstand-alone or together with a server side component that connects it to the full-blown server\r\ndatabase and handles synch messages.\r\n\r\n## Under construction\r\nWebDB is currently under heavy development and not ready for production just yet. \r\nUse at your own risk!\r\n\r\n### Roadmap\r\nThese features are currently planned to be implemented in WebDB:\r\n * [Support synching to remote server](https://github.com/Download/webdb/issues/1)\r\n * [Support custom entity types](https://github.com/Download/webdb/issues/2)\r\n * [Support local persistance](https://github.com/Download/webdb/issues/4)\r\n * [Support advanced queries](https://github.com/Download/webdb/issues/3)\r\n\r\n## Copyright\r\nCopyright 2015 by [Stijn de Witt](http://StijnDeWitt.com). Some rights reserved.\r\n\r\n## License\r\nLicensed under [Creative Commons Attribution 4.0 International (CC-BY-4.0)](https://creativecommons.org/licenses/by/4.0/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}